// Generated by gencpp from file ihand_control/hand.msg
// DO NOT EDIT!


#ifndef IHAND_CONTROL_MESSAGE_HAND_H
#define IHAND_CONTROL_MESSAGE_HAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ihand_control
{
template <class ContainerAllocator>
struct hand_
{
  typedef hand_<ContainerAllocator> Type;

  hand_()
    : thumb(0.0)
    , index(0.0)
    , middle(0.0)
    , ring(0.0)
    , baby(0.0)
    , trapezium(0.0)  {
    }
  hand_(const ContainerAllocator& _alloc)
    : thumb(0.0)
    , index(0.0)
    , middle(0.0)
    , ring(0.0)
    , baby(0.0)
    , trapezium(0.0)  {
  (void)_alloc;
    }



   typedef float _thumb_type;
  _thumb_type thumb;

   typedef float _index_type;
  _index_type index;

   typedef float _middle_type;
  _middle_type middle;

   typedef float _ring_type;
  _ring_type ring;

   typedef float _baby_type;
  _baby_type baby;

   typedef float _trapezium_type;
  _trapezium_type trapezium;





  typedef boost::shared_ptr< ::ihand_control::hand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ihand_control::hand_<ContainerAllocator> const> ConstPtr;

}; // struct hand_

typedef ::ihand_control::hand_<std::allocator<void> > hand;

typedef boost::shared_ptr< ::ihand_control::hand > handPtr;
typedef boost::shared_ptr< ::ihand_control::hand const> handConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ihand_control::hand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ihand_control::hand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ihand_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ihand_control': ['/home/kumakai/workspace/dataglove/src/ihand/ihand_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ihand_control::hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ihand_control::hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ihand_control::hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ihand_control::hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ihand_control::hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ihand_control::hand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ihand_control::hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f67db7bbc93485d67116d239f1e5343";
  }

  static const char* value(const ::ihand_control::hand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f67db7bbc93485dULL;
  static const uint64_t static_value2 = 0x67116d239f1e5343ULL;
};

template<class ContainerAllocator>
struct DataType< ::ihand_control::hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ihand_control/hand";
  }

  static const char* value(const ::ihand_control::hand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ihand_control::hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 thumb\n\
float32 index\n\
float32 middle\n\
float32 ring\n\
float32 baby\n\
float32 trapezium\n\
";
  }

  static const char* value(const ::ihand_control::hand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ihand_control::hand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thumb);
      stream.next(m.index);
      stream.next(m.middle);
      stream.next(m.ring);
      stream.next(m.baby);
      stream.next(m.trapezium);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ihand_control::hand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ihand_control::hand_<ContainerAllocator>& v)
  {
    s << indent << "thumb: ";
    Printer<float>::stream(s, indent + "  ", v.thumb);
    s << indent << "index: ";
    Printer<float>::stream(s, indent + "  ", v.index);
    s << indent << "middle: ";
    Printer<float>::stream(s, indent + "  ", v.middle);
    s << indent << "ring: ";
    Printer<float>::stream(s, indent + "  ", v.ring);
    s << indent << "baby: ";
    Printer<float>::stream(s, indent + "  ", v.baby);
    s << indent << "trapezium: ";
    Printer<float>::stream(s, indent + "  ", v.trapezium);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IHAND_CONTROL_MESSAGE_HAND_H
